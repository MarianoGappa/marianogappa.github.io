<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mariano Gappa's Blog</title>
    <description>Blog about Software Engineering and Music Production.</description>
    <link>http://marianogappa.github.io/</link>
    <atom:link href="http://marianogappa.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>ostinato: a chess engine written in Scala that runs in the Browser, Docker and the REPL</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;In this blogpost, I introduce the ostinato project: a Chess engine written in Scala.&lt;/p&gt;

&lt;p&gt;It’s not the fastest engine around, nor the hardest AI to beat. However, it enables some use cases that I haven’t found good free online sources for, like parsing notations into matches, converting between notations, playing against the AI from a given step in a parsed match, as well as the ability to solve chess puzzles and problems via elegant one-liners on the Scala REPL.&lt;/p&gt;

&lt;p&gt;By &lt;a href=&quot;https://www.scala-js.org/doc/project/cross-build.html&quot;&gt;cross-compiling&lt;/a&gt; into JS using &lt;a href=&quot;https://www.scala-js.org/&quot;&gt;ScalaJS&lt;/a&gt;, the same Scala code can run in the browser as a JavaScript library, which is great for two reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the tools can be available online for free with Github service quality&lt;/li&gt;
  &lt;li&gt;JS devs can use the library without any Scala knowledge&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://hub.docker.com/r/marianogappa/ostinato/&quot;&gt;ostinato Docker image&lt;/a&gt; available on Docker Hub (or it can be built locally) which exposes the same API as the JS library via an &lt;a href=&quot;http://doc.akka.io/docs/akka-http/current/scala.html&quot;&gt;Akka HTTP&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;Because ostinato is 100% &lt;a href=&quot;https://en.wikipedia.org/wiki/Stateless_protocol&quot;&gt;stateless&lt;/a&gt;, it’s a perfect candidate for &lt;a href=&quot;https://kubernetes.io/docs/user-guide/deployments/#what-is-a-deployment&quot;&gt;Kubernetes deployments&lt;/a&gt;: each individual API request (e.g. an AI move) can be load balanced over a set of pods, and pod count can be &lt;a href=&quot;https://kubernetes.io/docs/user-guide/horizontal-pod-autoscaling/&quot;&gt;auto-scaled&lt;/a&gt; based on CPU load average. This makes it attractive for AI research and as a backend for chess sites.&lt;/p&gt;

&lt;h2 id=&quot;project-links&quot;&gt;Project links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/marianogappa/ostinato&quot;&gt;Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marianogappa.github.io/ostinato/docs/&quot;&gt;Scaladoc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;demos&quot;&gt;Demos&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://marianogappa.github.io/ostinato-examples/play&quot;&gt;Chess Game&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marianogappa.github.io/ostinato-examples/parser&quot;&gt;Game Parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://marianogappa.github.io/ostinato-examples/convert&quot;&gt;Notation Converter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marianogappa.github.io/ostinato-examples/autoplay&quot;&gt;Auto-play&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;meta&quot;&gt;Meta&lt;/h2&gt;

&lt;p&gt;I’ve recently upset some good people of the Scala community with &lt;a href=&quot;https://movio.co/blog/migrate-Scala-to-Go/&quot;&gt;this blogpost&lt;/a&gt; that &lt;a href=&quot;https://news.ycombinator.com/item?id=13476988&quot;&gt;became a language war&lt;/a&gt;. Partly, for me, working on this blogpost means showing some of the nice use-cases Scala enables, in particular one that Golang can’t do: solving complex domain-specific problems with elegant one-liners. Hopefully we can focus on the engineering this time. Sorry that I didn’t foresee or do more to prevent this on the previous blogpost.&lt;/p&gt;

&lt;h2 id=&quot;solving-puzzles-in-the-repl&quot;&gt;Solving puzzles in the REPL&lt;/h2&gt;

&lt;p&gt;A quite unique feature of ostinato is that it leverages the Scala differentials in terms of succintness and elegance for actually solving problems. As a result, it becomes feasible to solve chess brain teasers directly in the REPL with only a few one-liners.&lt;/p&gt;

&lt;p&gt;Let’s try a checkmate in two moves. Here’s an &lt;a href=&quot;http://chesspuzzlesonline.com/solution/ps44/&quot;&gt;example puzzle&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://marianogappa.github.io/images/ostinato-mate-in-two.png&quot; alt=&quot;Example: mate in two moves&quot; /&gt;&lt;/p&gt;

&lt;p&gt;White moves first and it should make checkmate in the second move.&lt;/p&gt;

&lt;h3 id=&quot;lets-solve-it&quot;&gt;Let’s solve it!&lt;/h3&gt;

&lt;p&gt;First, we need to compile the jar so we can play with it in the REPL. This should be easy:
(alternatively, just download the latest jar from &lt;a href=&quot;https://github.com/marianogappa/ostinato/releases&quot;&gt;Releases&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sbt pack
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We should be able to start a REPL with the ostinato jar in the classpath (the exact path could change over time so just &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; the folder and find the ostinato_2.12-*.jar):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;scala -cp target/pack/lib/ostinato_2.12-1.0.2.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Import the core, so we can use the chess classes:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ostinato.chess.core._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ostinato.chess.core._&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OK. Let’s generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessBoard&lt;/code&gt; identical to the one in the puzzle:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChessGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromGridString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;........
     |....♕...
     |.♟..♟.♟♚
     |♟.....♘♛
     |...♙♟...
     |.♙....♙.
     |♙....♙♔.
     |........&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stripMargin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WhiteChessPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ostinato.chess.core.ChessBoard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....♕...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.♟..♟.♟♚&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;♟.....♘♛&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...♙♟...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.♙....♙.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;♙....♙♔.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All the &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessGame.from...&lt;/code&gt; &lt;a href=&quot;https://marianogappa.github.io/ostinato/docs/ostinato/chess/core/ChessGame$.html#fromGridString&quot;&gt;methods&lt;/a&gt; return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Try[ChessGame]&lt;/code&gt;, because parsing could fail. In this case, I know it’ll work so I just &lt;code class=&quot;highlighter-rouge&quot;&gt;.get&lt;/code&gt;, and get the board from it.&lt;/p&gt;

&lt;p&gt;Note that the Unicode symbols were made with the assumption of black foreground and white background. In the REPL, this is often times backwards. This might confuse you as to which colour is which. Use &lt;a href=&quot;https://en.wikipedia.org/wiki/Chess_symbols_in_Unicode&quot;&gt;this&lt;/a&gt; as a safe copy-paste.&lt;/p&gt;

&lt;p&gt;We’re gonna need to ask ostinato to be optimistic. If we calculate all actions on this board, ostinato will include &lt;code class=&quot;highlighter-rouge&quot;&gt;White resigns&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;White claims draw&lt;/code&gt;, which we’re not interested in. Same will apply for the next moves. Let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessOptimisations&lt;/code&gt; instance and pass it around:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChessOptimisations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beOptimistic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the meaty part. We need to express the following statement in code:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Find the actions such that for whichever following action, there’s at least one follow-up checkmate”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the puzzle was constructed properly, there should be only one action that satisfies those conditions:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doAllActions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doAllActions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doAllActions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLossFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BlackChessPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;scala.collection.immutable.Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ostinato.chess.core.ChessBoard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(.....♕..&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.♟..♟.♟♚&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;♟.....♘♛&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...♙♟...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.♙....♙.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;♙....♙♔.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;........)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yes! There’s exactly one &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessBoard&lt;/code&gt; in the resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Let’s extract the action so we can apply it to our &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessBoard&lt;/code&gt;. That can be accomplished by appending &lt;code class=&quot;highlighter-rouge&quot;&gt;.head.history.head.action.get&lt;/code&gt; to our previous line (i.e. getting the first action in the history).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ChessAction&lt;/code&gt; has a nice &lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt; implementation.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ostinato.chess.core.ChessAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'s &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s apply the action on the board. Not all actions can be applied on a board, so &lt;a href=&quot;https://marianogappa.github.io/ostinato/docs/ostinato/core/Board.html#doAction&quot;&gt;doAction&lt;/a&gt; returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;Option[ChessBoard]&lt;/code&gt;. For brevity we’ll just &lt;code class=&quot;highlighter-rouge&quot;&gt;.get&lt;/code&gt; it here:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ostinato.chess.core.ChessBoard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.....♕..&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.♟..♟.♟♚&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;♟.....♘♛&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...♙♟...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.♙....♙.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;♙....♙♔.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lastly, let’s see the full action history.&lt;/p&gt;

&lt;p&gt;We’ll have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pick any black action (&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; in this case)&lt;/li&gt;
  &lt;li&gt;filter the white checkmate action&lt;/li&gt;
  &lt;li&gt;retrieve the action history&lt;/li&gt;
  &lt;li&gt;history is stored backwards so we’ll have to reverse it to read it properly&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doAllActions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doAllActions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLossFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BlackChessPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res5&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ostinato.chess.core.ChessAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'s &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'s &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;King&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captures&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'s &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Knight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'s &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Profit! Do compare with the puzzle site, but the solutions match.&lt;/p&gt;

&lt;p&gt;Within the REPL, ostinato becomes a swiss-army knife for chess-related queries.&lt;/p&gt;

&lt;h3 id=&quot;taking-the-red-pillhttpsenwikipediaorgwikiredpillandbluepill&quot;&gt;Taking the &lt;a href=&quot;https://en.wikipedia.org/wiki/Red_pill_and_blue_pill&quot;&gt;red pill&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;If you’re gonna be playing around with advanced cases in the REPL, you’ll probably need some time to get used to the code (you should know Scala; no chance otherwise). These examples, the &lt;a href=&quot;https://marianogappa.github.io/ostinato/docs/&quot;&gt;Scaladoc&lt;/a&gt; and the &lt;a href=&quot;https://github.com/marianogappa/ostinato/tree/master/shared/src/test/scala/ostinato&quot;&gt;hundreds of tests&lt;/a&gt; are good starting points, but I’d be happy to help you on my spare time so let me know; my details are at the top of the page and/or post a comment below. There’s a very reduced set of &lt;a href=&quot;https://github.com/marianogappa/ostinato/blob/d653c83fa79d33a3ab2238f42f6bef474f0ff490/shared/src/main/scala/ostinato/chess/core/Notation.scala#L61&quot;&gt;voodoo code&lt;/a&gt; overall, and I’m not proud of it (anymore, that is).&lt;/p&gt;

&lt;h2 id=&quot;in-the-browser-ostinatojs&quot;&gt;In the browser: ostinato.js&lt;/h2&gt;

&lt;p&gt;Although ~97% of the ostinato codebase is written in Scala, it leverages ScalaJS as a facade to enable JS use cases. By cross-compiling the code, ScalaJS produces an &lt;a href=&quot;https://github.com/marianogappa/ostinato/releases&quot;&gt;ostinato.js file&lt;/a&gt;. This strategy makes all the free tools feasible.&lt;/p&gt;

&lt;p&gt;Most of the demos also leverage the popular and solid &lt;a href=&quot;http://chessboardjs.com/&quot;&gt;ChessboardJS&lt;/a&gt; library for UI. Because ChessboardJS’ notation conventions make a lot of sense, ostinato’s API was exposed in a way that is compatible with it.&lt;/p&gt;

&lt;p&gt;The best part of JS support is that JS developers can use the chess engine without any Scala knowledge.&lt;/p&gt;

&lt;p&gt;Just download the latest js file in the &lt;a href=&quot;https://github.com/marianogappa/ostinato/releases&quot;&gt;releases section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using ostinato.js is really simple and easy. For a great working intro, check the &lt;a href=&quot;https://marianogappa.github.io/ostinato-examples/autoplay&quot;&gt;auto-play demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the meaty part. You’ll have to pardon my js, but I think it should be quite clear:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boardUi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialBoard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialBoard&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;aiMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ostinato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomAiMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aiMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aiMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isCheckMate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;aiMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialBoard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aiMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;boardUi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;boardUi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChessBoard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'board'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;moveSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fast'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;boardUi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The only ostinato line in there is &lt;code class=&quot;highlighter-rouge&quot;&gt;ostinato.chess.js.Js().randomAiMove(board)&lt;/code&gt;. The rest is ChessboardJS and plain JavaScript.&lt;/p&gt;

&lt;p&gt;Here’s what’s available at the moment from JavaScript: &lt;a href=&quot;https://github.com/marianogappa/ostinato/blob/master/js/src/main/scala/ostinato/chess/js/Js.scala&quot;&gt;Js.scala&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you should be able to go to the other examples. If you’re interested in developing an advanced use case, I’d be happy to help you on my spare time. Find my contact details at the top of this page and/or post a comment below.&lt;/p&gt;

&lt;h2 id=&quot;server-side&quot;&gt;Server-side&lt;/h2&gt;

&lt;p&gt;Running ostinato on the JVM has several pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It runs faster than its ScalaJS counterpart&lt;/li&gt;
  &lt;li&gt;Because ostinato is 100% stateless, one server can play several games at a time&lt;/li&gt;
  &lt;li&gt;No high CPU usage on the client; responsiveness is up to the server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;via-sbt&quot;&gt;Via sbt&lt;/h2&gt;

&lt;p&gt;Try starting the server via sbt:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sbt ostinatoJVM/run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can check if it’s working by trying the healthcheck:&lt;/p&gt;

&lt;p&gt;(which could be used as a &lt;code class=&quot;highlighter-rouge&quot;&gt;livenessProbe&lt;/code&gt; on a Kubernetes deployment)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl localhost:51234/healthcheck
OK!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or get an initial board to start playing from:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl localhost:51234/initialBoard
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;board&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then make the computer play from it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl localhost:51234/randomAiMove -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'{&quot;board&quot;:&quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;:true,
  &lt;span class=&quot;s2&quot;&gt;&quot;isCheck&quot;&lt;/span&gt;:false,
  &lt;span class=&quot;s2&quot;&gt;&quot;isDraw&quot;&lt;/span&gt;:false,
  &lt;span class=&quot;s2&quot;&gt;&quot;board&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;rnbqkbnr/pppppppp/8/8/8/5N2/PPPPPPPP/RNBQKB1R b KQkq - 1 1 7163&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;isCheckmate&quot;&lt;/span&gt;:false,
  &lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Nf3&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;lets-try-something-more-fun&quot;&gt;Let’s try something more fun&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.chesspuzzles.com/mate-in-one&quot;&gt;This site&lt;/a&gt; provides “mate in one move” puzzles. Here’s one example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://marianogappa.github.io/images/ostinato-mate-in-one.png&quot; alt=&quot;Chess Puzzles: Mate in one&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ostinato server expects the input boards in “ostinato notation”, which is simply &lt;a href=&quot;https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation&quot;&gt;FEN notation&lt;/a&gt; plus (optionally) the history in &lt;a href=&quot;https://en.wikipedia.org/wiki/ICCF_numeric_notation&quot;&gt;ICCF notation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m too lazy to translate a board to FEN manually, so I looked around (for way longer that it would have taken me to just do it manually -.-) and I found &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.fimetech.chessfimee&amp;amp;rdid=com.fimetech.chessfimee&amp;amp;pli=1&quot;&gt;this Android app&lt;/a&gt; that OCRs the board and producess the FEN, which was:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r1b1qb1r/1p1n2pp/p2P4/4N2k/7n/1Q4P1/PP2NP1P/R1B2RK1 w - - 0 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I would expect the basic AI to want to win as soon as possible, so let’s see if it finds the checkmate:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl localhost:51234/basicAiMove -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'{&quot;board&quot;:&quot;r1b1qb1r/1p1n2pp/p2P4/4N2k/7n/1Q4P1/PP2NP1P/R1B2RK1 w - - 0 1&quot;}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type:application/json&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;isCheck&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;isDraw&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;board&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;r1b1qb1r/1p1n2pp/p2P4/4N2k/6Pn/1Q6/PP2NP1P/R1B2RK1 b - - 0 1 7374&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;isCheckmate&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;g4+&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Luckily, the AI didn’t disappoint me :). It recommended advancing the pawn on the g file (above the white king), and it seems adamant that it’s a checkmate.&lt;/p&gt;

&lt;p&gt;From a geeky perspective, I find it useful to have this decoupled mini-tool at my disposal.&lt;/p&gt;

&lt;p&gt;Also, I recently switched the JSON engine to &lt;a href=&quot;https://github.com/spray/spray-json&quot;&gt;spray-json&lt;/a&gt; which patiently reminded me of the JSON object names and types I was supposed to provide to the API call until I got them right. Props to &lt;a href=&quot;https://github.com/sirthias&quot;&gt;Mathias&lt;/a&gt;. If somebody could please ask him how can I unmarshal the request’s JSON payload when the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; is not &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;, I’d really appreciate it. I’ve asked around on Gitter and SO and couldn’t get a good solution.&lt;/p&gt;

&lt;h2 id=&quot;playing-a-demo-game-using-the-jvm-as-back-end&quot;&gt;Playing a demo game using the JVM as back-end&lt;/h2&gt;

&lt;p&gt;Simply use the provided &lt;a href=&quot;https://marianogappa.github.io/ostinato-examples/play&quot;&gt;demo chess game&lt;/a&gt; and add the following query parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;useServer=localhost:51234 // location of your ostinato back-end
depth=1 // complexity of the AI (from 0, but 3 is already slow)
debug=1 // optional: logs AI rationale to STDOUT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;e.g. &lt;a href=&quot;https://marianogappa.github.io/ostinato-examples/play?useServer=localhost:51234&amp;amp;depth=1&quot;&gt;https://marianogappa.github.io/ostinato-examples/play?useServer=localhost:51234&amp;amp;depth=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m not a particularly good chess player, but depth 3 beats me. &lt;a href=&quot;https://twitter.com/MarianoGappa/status/716530501075337216&quot;&gt;I was so happy&lt;/a&gt; when I reached that milestone &amp;lt;3&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;p&gt;You can start an ostinato container right from Docker Hub with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -p 51234:51234 marianogappa/ostinato:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once it’s up, you can try the healthcheck and other examples described above. Note that Docker may not open the port on &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;; this depends on your Docker installation.&lt;/p&gt;

&lt;p&gt;If you want to experiment with the code and build the image locally (for which you will need sbt &amp;amp; Docker), you can use the provided script on the root folder:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./docker-build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The script will kindly ask you to run &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt packArchiveZip&lt;/code&gt; if you haven’t done so, or if the last produced artifact was last modified half and hour ago or more.&lt;/p&gt;

&lt;p&gt;The script always builds the &lt;code class=&quot;highlighter-rouge&quot;&gt;ostinato&lt;/code&gt; image with the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt;. If you want to specify a custom tag, you can do it like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v1.2.3 ./docker-build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;As previously mentioned, ostinato is 100% stateless. The server doesn’t save any state from previous requests, and all the information necessary to respond to a request is present in the request itself.&lt;/p&gt;

&lt;p&gt;This means that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any given ostinato server can satisfy requests from multiple games&lt;/li&gt;
  &lt;li&gt;A game can be played by issuing requests to multiple ostinato servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, load balancing strategies become very simple with ostinato. Some popular solutions right now are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;Serverless&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/user-guide/deployments/#what-is-a-deployment&quot;&gt;Kubernetes Deployments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/&quot;&gt;AWS ELB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At least with Kubernetes, there’s also the possibility of dynamically increasing the number of ostinato container replicas when the CPU usage exceeds a given threshold; this is called &lt;a href=&quot;https://kubernetes.io/docs/user-guide/horizontal-pod-autoscaling&quot;&gt;auto-scaling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ostinato doesn’t use any disk and doesn’t have any special configurations so you don’t need to mount anything. As a JVM application, though, it’s not the cheapest in terms of CPU, memory, and image size. It’s using the smallest base image I could find that has a JVM: the &lt;a href=&quot;https://hub.docker.com/r/anapsix/alpine-java/&quot;&gt;alpine-java&lt;/a&gt; one.&lt;/p&gt;

&lt;p&gt;Here’s a deployment manifest to get you started:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ostinato&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ostinato&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ostinato&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ostinato:latest&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;500m&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;128Mi&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4000m&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;512Mi&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/healthcheck&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51234&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The rationale behind low requests and high limits is that ostinato aggresively parallelises requests but they arrive infrequently, so bursts of usage can be multiplexed on the same Kubernetes minion. Mileage may vary; greater depths are memory hungry.&lt;/p&gt;

&lt;p&gt;You’ll need a service to expose the server to your client code. Here’s a service manifest:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ostinato&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ostinato&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51234&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Apply both manifests with &lt;a href=&quot;https://kubernetes.io/docs/user-guide/kubectl-overview/&quot;&gt;kubectl&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f ostinato-deployment.yml
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f ostinato-service.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your ostinato instances should be reachable via the Kubernetes proxy API, e.g.:&lt;/p&gt;

&lt;p&gt;https://kubernetes_domain_name/api/v1/proxy/services/ostinato:51234/healthcheck&lt;/p&gt;

&lt;p&gt;Follow the auto-scaling guidelines for dynamic scaling. Here’s a quick trick:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl autoscale deployment ostinato --min=2 --max=5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;developing-ostinato-and-final-thoughts&quot;&gt;Developing ostinato and final thoughts&lt;/h2&gt;

&lt;p&gt;Developing ostinato was an amazing experience. I got to learn a lot about chess, a lot about Scala, a lot about OSS and a lot about software engineering.&lt;/p&gt;

&lt;p&gt;I believe ostinato has enabled some free and open source chess-related use cases that were unavailable before; if you find them useful I’d be very happy to &lt;a href=&quot;https://twitter.com/MarianoGappa&quot;&gt;hear about it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing I wanted to learn was how much I was profiting from OOP (after reading Lawrence Krubner’s famous &lt;a href=&quot;http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end&quot;&gt;OOP blogpost&lt;/a&gt;). Seeing chess as a poster child for OOP, I started the library as a “turn-based game library” rather than just a “chess library”, where &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessGame&lt;/code&gt; extended &lt;code class=&quot;highlighter-rouge&quot;&gt;Game&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessAction&lt;/code&gt; extended &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; and so on. The resulting code &lt;a href=&quot;https://github.com/marianogappa/ostinato/blob/d653c83fa79d33a3ab2238f42f6bef474f0ff490/shared/src/main/scala/ostinato/core/Game.scala&quot;&gt;scares me still&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another thing I’ve learnt is that OOP and immutable design meet the hardware in a blurring mist, and while the succintness and elegance can aid in real-life problem solving, they also hide big O complexity greatly. At some inflection point, the indirection trade-off is not worth it. While not proud about it, I must link you to some &lt;a href=&quot;https://github.com/marianogappa/ostinato/blob/d653c83fa79d33a3ab2238f42f6bef474f0ff490/shared/src/main/scala/ostinato/chess/core/package.scala#L199&quot;&gt;compromises I’ve made&lt;/a&gt; to gain acceptable response times.&lt;/p&gt;

&lt;p&gt;During extensive refactorings, I’ve learnt to love IntelliJ’s renaming features. If just for that, and with its shortcomings, I think IntelliJ has raised the bar in that respect. I’ve found it as convenient as Sublime Text’s multiple cursors.&lt;/p&gt;

&lt;p&gt;I’ve learnt to beware of implicits. While they enable important use cases, they are used way more than they should be. I wasn’t able to completely get rid of them in the ostinato codebase (partly because I was bound by the superclass’ method signatures; thanks OOP), but overall I believe I’ve tamed the beast and learnt a valuable lesson.&lt;/p&gt;

&lt;p&gt;Thank you for reading this blogpost. KISS!&lt;/p&gt;

&lt;style type=&quot;text/css&quot;&gt;
@font-face {
  font-family: 'DejaVuSansMono';
  src: url('/images/DejaVuSansMono.ttf');
}
code {
  font-family: DejaVuSansMono;
}
&lt;/style&gt;

</description>
        <pubDate>Thu, 23 Mar 2017 00:00:00 +1300</pubDate>
        <link>http://marianogappa.github.io/software/2017/03/23/ostinato-a-chess-engine-written-in-scala-that-runs-on-the-browser-docker-and-the-repl/</link>
        <guid isPermaLink="true">http://marianogappa.github.io/software/2017/03/23/ostinato-a-chess-engine-written-in-scala-that-runs-on-the-browser-docker-and-the-repl/</guid>
      </item>
    
      <item>
        <title>Making the move from Scala to Go, and why we’re not going back</title>
        <description>&lt;p&gt;I’ve written a blogpost for Movio about our squad’s decision to migrate part of our Scala codebase to Go. The actual blogpost is on the Movio blog:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://movio.co/blog/migrate-Scala-to-Go/&quot;&gt;https://movio.co/blog/migrate-Scala-to-Go/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +1300</pubDate>
        <link>http://marianogappa.github.io/software/2017/01/25/making-the-move-from-scala-to-go-and-why-were-not-going-back/</link>
        <guid isPermaLink="true">http://marianogappa.github.io/software/2017/01/25/making-the-move-from-scala-to-go-and-why-were-not-going-back/</guid>
      </item>
    
      <item>
        <title>Diffing streams on the terminal</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;In this blogpost, I describe the most popular tools currently used to diff streams on the terminal, their differences and limitations. Then I introduce a new tool I’ve developed, &lt;a href=&quot;https://github.com/MarianoGappa/sd&quot;&gt;sd&lt;/a&gt;, to address some of these limitations.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently, I had this situation at work where I had to come up with a list of unprocessed transactions, identified by some &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;UUID&lt;/a&gt;. I had the transaction queue somewhere, and the transaction results somewhere else. Just a “set diff”, right? Well, my case was not so straightforward.&lt;/p&gt;

&lt;h2 id=&quot;basic-stream-diffing&quot;&gt;Basic stream diffing&lt;/h2&gt;

&lt;p&gt;The most common way to do “set diffs” on the terminal is using &lt;a href=&quot;https://en.wikipedia.org/wiki/Comm&quot;&gt;comm&lt;/a&gt;; and it’s also the fastest tool I’ve found. Just remember that the streams need to be sorted.&lt;/p&gt;

&lt;p&gt;Diffing with comm&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;comm -23 &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seq 100 | sort&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seq 6 100 | sort&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another (slower but nevertheless popular) way to accomplish the same task is with &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -Fxvf&lt;/code&gt;. Note that in this case you don’t need to sort the streams, but you have to invert them as you pass them (it looks weird until you realise that the second argument is kind of on the left, because it’s often the piped STDIN).&lt;/p&gt;

&lt;p&gt;Diffing with grep&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep -Fxvf &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seq 6 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seq 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I discourage the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -Fxvf&lt;/code&gt; for two good reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s slower; maybe not on these examples but it is on real-life examples.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It doesn’t seem to work properly on the version of grep that comes with OS X  (BSD) for even diffs in the dozen lines. I’ve tried the same example on an Alpine container and it just works.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alpine (&lt;code class=&quot;highlighter-rouge&quot;&gt;grep 2.25-r0&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;seq 20 &amp;gt; a &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; seq 6 20 &amp;gt; b &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep -Fxvf b a
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OS X (&lt;code class=&quot;highlighter-rouge&quot;&gt;grep (BSD grep) 2.5.1-FreeBSD&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;seq 20 &amp;gt; a &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; seq 6 20 &amp;gt; b &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep -Fxvf b a
1
2
3
4
5
16
17
18
19
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-about-infinite-streams&quot;&gt;What about infinite streams?&lt;/h2&gt;

&lt;p&gt;The tools mentioned above work with streams that finish, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;files&lt;/li&gt;
  &lt;li&gt;commands (provided they finish)&lt;/li&gt;
  &lt;li&gt;sql queries&lt;/li&gt;
  &lt;li&gt;curl requests (provided they finish or timeout)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Infinite streams are ok on the left side stream of the diff, but you can’t start diffing until the right side stream finishes.&lt;/p&gt;

&lt;p&gt;Note that you can’t &lt;code class=&quot;highlighter-rouge&quot;&gt;| sort&lt;/code&gt; an infinite stream, so if you plan to diff an infinite stream on the left side, &lt;code class=&quot;highlighter-rouge&quot;&gt;comm&lt;/code&gt; is not an option; you have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -Fxvf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, if you diff with an infinite stream on the left side, your diff will work but will still never finish. This is fine, unless you want your diff to be part of a script.&lt;/p&gt;

&lt;h2 id=&quot;common-strategies-for-diffing-infinite-streams&quot;&gt;Common strategies for diffing infinite streams&lt;/h2&gt;

&lt;p&gt;The two intuitive approaches are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;to take the first &lt;em&gt;n&lt;/em&gt; items from the infinite stream&lt;/li&gt;
  &lt;li&gt;to timeout the stream after some time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Taking the first 10 lines from two “infinite” seqs&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;comm -23 &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seq 10000000000 | head -n 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;            &lt;/span&gt;&amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seq 6 10000000000 | head -n 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(for brevity, let’s assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;seq 10000000000&lt;/code&gt; takes infinite time; to be fair it does take an impractical amount of time)&lt;/p&gt;

&lt;p&gt;Then there is &lt;a href=&quot;http://man7.org/linux/man-pages/man1/timeout.1.html&quot;&gt;timeout&lt;/a&gt; in the Linux coreutils package for timing out a command after a specified duration. Note that it doesn’t come installed in OS X.&lt;/p&gt;

&lt;p&gt;The following example is illustrative, because the command varies between systems&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;comm -23 &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;timeout 1s seq 10000000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;            &lt;/span&gt;&amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;timeout 1s seq 6 10000000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; on OS X, your best bet is to install coreutils from Homebrew, with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install coreutils
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;and then all coreutils commands are available, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; prepended to their names (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;gtimeout&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-these-strategies&quot;&gt;The problem with these strategies&lt;/h2&gt;

&lt;p&gt;Both approaches share a common defect: they don’t react to stream output.&lt;/p&gt;

&lt;p&gt;There’s no way to express the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;time out after some time has passed with no received lines&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, it’s quite common to use tools that poll forever, stuck in some form of receive loop.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Kafka console consumer, like &lt;a href=&quot;https://github.com/fgeller/kt&quot;&gt;kt&lt;/a&gt; (my originating use case)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tail -f&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Any poll-forever scheme, e.g.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; TRUE &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;curl https://status.github.com/api/status.json
  sleep 10
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;my-current-solution-sd-stream-differ&quot;&gt;My current solution: &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; (stream differ)&lt;/h2&gt;

&lt;p&gt;I developed a very simple, well-tested, modern and efficient tool for diffing two newline-separated streams, timing them out if necessary. It’s written in &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MarianoGappa/sd&quot;&gt;sd repo @ Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The initial example, with &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;seq 100 | sd &lt;span class=&quot;s1&quot;&gt;'seq 6 100'&lt;/span&gt;
2
1
3
5
4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; does not guarantee output order. This is because it violently parallelises work via goroutines. If input is sporadical, output should not come out out of order. If you need sorted output, just add &lt;code class=&quot;highlighter-rouge&quot;&gt;| sort&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;If you do add &lt;code class=&quot;highlighter-rouge&quot;&gt;| sort&lt;/code&gt; at the end, even though &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; will diff right away, you won’t see results until &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; has finished; this is just how sorting works. Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; will give you a natural sort (alphanumerical or numerical, and optionally reverse), but you would still lose the input order.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--hard-timeout&lt;/code&gt; to timeout after a number of seconds&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;seq 100 | sd -h 1 &lt;span class=&quot;s1&quot;&gt;'tail -fn 100 &amp;lt;(seq 6 100)'&lt;/span&gt;
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--timeout&lt;/code&gt; to timeout after a number of seconds of no new lines. Note that the two streams hold independent timeouts.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat uuids.txt | sd -t 10 &lt;span class=&quot;s1&quot;&gt;'./kafka-consumer.sh uuids_topic'&lt;/span&gt;
a5aff766-564a-11e6-beb8-9e71128cae77
a5affbd0-564a-11e6-beb8-9e71128cae77
a5afff2c-564a-11e6-beb8-9e71128cae77
a5b00328-564a-11e6-beb8-9e71128cae77
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Usually, tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; or commit log consumers take some time to startup, or to run the query. It makes sense to have a longer timeout period for the first message. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--patience&lt;/code&gt; for this.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat uuids.txt | sd -p 20 -t 10 &lt;span class=&quot;s1&quot;&gt;'./kafka-consumer.sh uuids_topic'&lt;/span&gt;
a5aff766-564a-11e6-beb8-9e71128cae77
a5affbd0-564a-11e6-beb8-9e71128cae77
a5afff2c-564a-11e6-beb8-9e71128cae77
a5b00328-564a-11e6-beb8-9e71128cae77
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 0&lt;/code&gt; for waiting indefinitely for the initial message.&lt;/p&gt;

&lt;p&gt;If you’re sure the second stream will finish, use &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--infinite&lt;/code&gt;; this way you can be confident that &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; will wait until the second stream finishes to start diffing.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; is a nifty tool, and a useful addition for a dev’s toolbelt. It allows for automation scripts that involve infinite streams; something not readily available currently using GNU-style CLI tools.&lt;/p&gt;

&lt;p&gt;It’s not perfect: I wouldn’t choose it over &lt;code class=&quot;highlighter-rouge&quot;&gt;comm&lt;/code&gt; for streams that finish, because even though &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; is fast, it does have to check every line of &lt;code class=&quot;highlighter-rouge&quot;&gt;STDIN&lt;/code&gt; against every line of the second stream where &lt;code class=&quot;highlighter-rouge&quot;&gt;comm&lt;/code&gt; does not. On very long streams, this can get impractically slow. Also, if output order is critical and it doesn’t follow a natural order criterion, &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; can’t be used.&lt;/p&gt;

&lt;p&gt;Please, consider &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; for your stream diffing needs. &lt;a href=&quot;https://github.com/MarianoGappa/sd/issues&quot;&gt;Issues&lt;/a&gt; and &lt;a href=&quot;https://github.com/MarianoGappa/sd/issues#fork-destination-box&quot;&gt;PRs&lt;/a&gt; are welcome and encouraged: &lt;code class=&quot;highlighter-rouge&quot;&gt;sd&lt;/code&gt; is &lt;a href=&quot;https://github.com/MarianoGappa/sd/blob/master/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jul 2016 00:00:00 +1200</pubDate>
        <link>http://marianogappa.github.io/software/2016/07/30/diffing-streams-on-the-terminal/</link>
        <guid isPermaLink="true">http://marianogappa.github.io/software/2016/07/30/diffing-streams-on-the-terminal/</guid>
      </item>
    
      <item>
        <title>jira-cli: a lightweight bash script for easily querying JIRA</title>
        <description>&lt;h2 id=&quot;get-jira-cli-at&quot;&gt;Get jira-cli at&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MarianoGappa/jira-cli&quot;&gt;https://github.com/MarianoGappa/jira-cli&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;JIRA is cool. But it’s slow! And it’s not composable. And devs/ops love the terminal.&lt;/p&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Once I had this requirement to tell some business person about what tickets (JIRA issues) we deployed. We had the ticket numbers on the commit messages, so a &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff ... | grep ... | sort | uniq&lt;/code&gt; between deploy tags was kind of enough to get them…only the guy wanted the ticket titles as well. With some clever Sublime multi-cursor hacking plus a terminal I would open all the tickets on Chrome and then copy-paste the titles from them one-by-one. So boring and slow!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there’s looking for tickets. It’s easy enough on JIRA, with JQL and the UI tools. But it’s slow!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there’s keeping a personal backlog on JIRA, which can also be achieved with JQL + bookmarks. That process is just fine as it is just using the UI, until you want to combine it with something (i.e. until you want to “pipe it to something”). For example, boss comes in: “can you do this?”. You: “I have these 3 tickets already. What’s the priority?”. What’s the fastest easiest way to get those 3 links so that your boss can prioritise? Or is it better to get ticket names and titles rather than links?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Say you have a list of say 5 tickets you’re trying to finish by the end of the week. All you care about is those 5 tickets and their status; why should you load all that clunky UI, set up labels beforehand, etc, etc?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quick-start&quot;&gt;Quick start&lt;/h2&gt;

&lt;p&gt;Please follow the instructions &lt;a href=&quot;https://github.com/MarianoGappa/jira-cli/blob/master/README.md&quot;&gt;in the readme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that jira-cli requires the awesome &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt; tool, which if you don’t have installed, you really should! jira-cli will remind you to install it if it doesn’t find it.&lt;/p&gt;

&lt;p&gt;When you first run &lt;code class=&quot;highlighter-rouge&quot;&gt;jira&lt;/code&gt;, it’ll open &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.jiraconfig&lt;/code&gt; on your default editor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://marianogappa.github.io/images/jira-cli-first-run.png&quot; alt=&quot;Running jira-cli for the first time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you configure your credentials you should be good to go. Try &lt;code class=&quot;highlighter-rouge&quot;&gt;jira ok&lt;/code&gt; one last time to double-check:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jira ok
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tweaking-and-examples&quot;&gt;Tweaking and examples&lt;/h2&gt;

&lt;p&gt;Personally, I like to go all the way with the tools I use the most, so I like these aliases:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subl .'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'docker'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'kubectl'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jira'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So if one morning I feel energetic enough to finish up all my backlog, I open all my assigned tickets in Chrome in one go!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;j me | j o
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Which translates to:
&amp;gt;jira “output all ticket numbers assigned to me” | jira “open all tickets from STDIN on browser”)&lt;/p&gt;

&lt;p&gt;(To clarify: you don’t have to be so hacker: &lt;code class=&quot;highlighter-rouge&quot;&gt;jira me | jira open&lt;/code&gt; works just as well.
For more info just type: &lt;code class=&quot;highlighter-rouge&quot;&gt;jira&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;If the boss asks me to do something (like in the example use case), I can give him my backlog for him to prioritise with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;j me | j t
ABC-123     Do some work
DEF-456     Do some more work
GHI-789     Do very urgent work
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I can’t remember what I was working on, I really like the search command. It shows up to 15 results ordered by last updated using JQL’s &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; filter, all bound to the projects you configured on &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.jiraconfig&lt;/code&gt;. You can then choose to open one by adding e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;| j o 3&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;j s cat
JKL-012     Feed the cat
MNO-345     Buy a new cat
PQR-678     Take the cat shopping

~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;j s cat | j o 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In closing&lt;/h2&gt;

&lt;p&gt;Try it, it’s free and open source! It’s not the new &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;, but it can be pretty useful once or twice a day. It’s been stable enough for me for a few months now. Please contribute with issues, PRs, etc! If you find it useful, let me know!&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:00:00 +1200</pubDate>
        <link>http://marianogappa.github.io/software/2016/05/10/jira-cli/</link>
        <guid isPermaLink="true">http://marianogappa.github.io/software/2016/05/10/jira-cli/</guid>
      </item>
    
      <item>
        <title>Fixing syntax highlighting issues in Sublime Text 3</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;My two main IDEs nowadays are &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;Intellij Idea&lt;/a&gt; and &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt;. I basically like to use IDEA for strongly-typed languages and Sublime for weakly-typed languages. However, not long ago I found a bug on Sublime!&lt;/p&gt;

&lt;p&gt;In version 5.4 of PHP, they &lt;a href=&quot;http://php.net/manual/en/migration54.new-features.php&quot;&gt;introduced a new syntax for arrays&lt;/a&gt; that is reminiscent of the JSON notation:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Old PHP Array syntax
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// New PHP Array syntax
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even though support for this new syntax within the Sublime codebase seems to be limited, oddly enough the colouring seems to be working properly. But I’ve found a case where it’s not. This case was probably not discovered because PHP people don’t like type-hinting!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://marianogappa.github.io/images/sublime-highlighting-before.png&quot; alt=&quot;Highlighting Issue - Before&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;now-heres-how-to-fix-it&quot;&gt;Now, here’s how to fix it&lt;/h2&gt;

&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ever wondered how Sublime does the syntax highlighting magic? The answer is: lots and lots of regexes. &lt;a href=&quot;https://github.com/sublimehq/Packages/blob/master/PHP/PHP%20Source.sublime-syntax&quot;&gt;This is the Language file for PHP&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The syntax highlighting feature uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Oniguruma&quot;&gt;Oniguruma regular expression library&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I recommend &lt;a href=&quot;https://duckduckgo.com/?q=regex%20cheat%20sheet&amp;amp;ia=cheatsheet&amp;amp;iax=1&quot;&gt;this DuckDuckGo regex cheatsheet&lt;/a&gt; if you need a quick reference; it’s very good!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also, I recommend using &lt;a href=&quot;http://rubular.com/&quot;&gt;this online regex parser&lt;/a&gt; when you get into the regex hacking part. It’s not my favourite one but it’s Ruby-based.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Before we begin, you should skim through &lt;a href=&quot;http://www.sublimetext.com/docs/3/syntax.html&quot;&gt;this syntax guide&lt;/a&gt; to familiarise yourself with the code we’ll be editing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optionally, you might want to read &lt;a href=&quot;http://stackoverflow.com/questions/25184605/cloning-a-sublime-text-3-highlighting-syntax-definition&quot;&gt;this StackOverflow question&lt;/a&gt;, as it was very insightful to understand the process.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;opening-the-language-file&quot;&gt;Opening the language file&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is to open the Language package (in this case the PHP one). For this, we need to &lt;a href=&quot;https://packagecontrol.io/packages/PackageResourceViewer&quot;&gt;install the PackageResourceViewer plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Within Sublime’s Command Palette, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PackageResouceViewer: Open Resource
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then select the &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP&lt;/code&gt; resource and then finally &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP.tmLanguage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You’ll find a very scary xml file. This is the annoying part. The guides recommend that you use &lt;a href=&quot;https://packagecontrol.io/packages/AAAPackageDev&quot;&gt;the AAAPackageDev package&lt;/a&gt; to convert this xml to yaml, thus making it an order of magnitude easier to work with it. Unfortunately, it also says that it doesn’t convert perfectly, and this defeats the purpose of using it! I did something different.&lt;/p&gt;

&lt;h3 id=&quot;editing-the-language-file&quot;&gt;Editing the language file&lt;/h3&gt;

&lt;p&gt;This is the good news: you can edit this xml freely (please keep a copy of the original!), and the changes become instantly applied on PHP-syntax-enabled files upon save!&lt;/p&gt;

&lt;p&gt;To make sense of the xml monster, just look up &lt;a href=&quot;https://github.com/sublimehq/Packages/blob/master/PHP/PHP%20Source.sublime-syntax&quot;&gt;the yaml file on the Github repository&lt;/a&gt;. Make sure your Sublime and the GH code are for the same version; otherwise you’re not actually looking at the same code. Having the latest version of Sublime installed should be enough.
Looking at the yaml file makes it much easier to spot the place where you need to make the regex change.&lt;/p&gt;

&lt;p&gt;After about half an hour of tinkering with regexes, I finally found a modification that worked for all cases I could think of. The problem that held me up was that I was trying to match either 2 groups (&lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;) or 1 group (&lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;), so I needed a wrapping group with two cases (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|b)&lt;/code&gt;) that wasn’t actually capturing anything per se. The solution to this was &lt;code class=&quot;highlighter-rouge&quot;&gt;Passive (non-capturing) groups&lt;/code&gt; (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;(?:...)&lt;/code&gt;). I mention this because you might need it; when you see how the classes are picked you’ll understand why.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://marianogappa.github.io/images/sublime-highlighting-after.png&quot; alt=&quot;Highlighting Issue - Before&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fun-fact&quot;&gt;Fun fact&lt;/h2&gt;

&lt;p&gt;Before I came up with the idea of passive capturing groups I naturally thought of lookbehind assertions (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;?&amp;lt;=&lt;/code&gt;). When it didn’t work I facepalmed: “of course! it’s xml; I have to escape it (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;lt;&lt;/code&gt;)”. When it didn’t work again I started googling. It seems the guys gave up on lookbehinds altogether for this reason so they just didn’t implement it, even though Oniguruma supports it :) Good idea though; lookbehinds are slow and not universally supported (&lt;a href=&quot;http://stackoverflow.com/questions/24093540/why-doesnt-javascript-have-lookbehinds&quot;&gt;Javascript&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/7605615/regex-negative-lookbehind-in-ruby-doesnt-seem-to-work?rq=1&quot;&gt;Ruby &amp;lt; 1.9&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;lastly&quot;&gt;Lastly&lt;/h2&gt;

&lt;p&gt;Once you are done and you’re sure it works properly, share your contribution to the World!
&lt;a href=&quot;https://github.com/sublimehq/Packages/issues/98&quot;&gt;This&lt;/a&gt; was my Github issue for the PHP syntax fix.&lt;/p&gt;

&lt;p&gt;Happy open sourcing!&lt;/p&gt;

</description>
        <pubDate>Sat, 27 Feb 2016 00:00:00 +1300</pubDate>
        <link>http://marianogappa.github.io/software/2016/02/27/fixing-syntax-highlighting-in-sublime3/</link>
        <guid isPermaLink="true">http://marianogappa.github.io/software/2016/02/27/fixing-syntax-highlighting-in-sublime3/</guid>
      </item>
    
  </channel>
</rss>
